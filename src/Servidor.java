
import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author JBP1996 Atec
 */
public class Servidor extends javax.swing.JFrame {
    /**
     * Creates new form Servidor
     */

    ServerSocket serverSocket;
    Socket socket;
    DataInputStream din;
    DataOutputStream dout;
    InputStream inp;
    String msgin=null,msgout=null;
    ArrayList arClientes;
    public Servidor(){
        initComponents();
        iniciar.setEnabled(true);
        parar.setEnabled(false);
        arClientes = new ArrayList();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        ip = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        porta = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        conexao = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        iniciar = new javax.swing.JButton();
        parar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Servidor");

        jLabel2.setText("IP:");

        ip.setEnabled(false);

        jLabel3.setText("Porta:");

        porta.setText("5000");

        conexao.setColumns(20);
        conexao.setRows(5);
        conexao.setEnabled(false);
        jScrollPane1.setViewportView(conexao);

        jLabel4.setText("Conexao");

        iniciar.setText("Iniciar");
        iniciar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                iniciarMouseClicked(evt);
            }
        });

        parar.setText("Parar");
        parar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pararMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel4))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(174, 174, 174)
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(ip, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(porta, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(iniciar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(parar)))
                        .addGap(0, 8, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(ip, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(porta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(iniciar)
                    .addComponent(parar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 192, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void iniciarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_iniciarMouseClicked
        // TODO add your handling code here:
        new RunServer().start();
        iniciar.setEnabled(false);
        parar.setEnabled(true);
    }//GEN-LAST:event_iniciarMouseClicked

    private void pararMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pararMouseClicked
        // TODO add your handling code here:
        fecharServidor();
    }//GEN-LAST:event_pararMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Servidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Servidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Servidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Servidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Servidor().setVisible(true);
            }       
        });
            
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JTextArea conexao;
    private javax.swing.JButton iniciar;
    private javax.swing.JTextField ip;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton parar;
    private static javax.swing.JTextField porta;
    // End of variables declaration//GEN-END:variables
    
    public void iniciarServidor(){
        conexao.setText("SERVIDOR INICIADO COM SUCESSO");
  
        Socket sockete;
        try{
            sockete = serverSocket.accept();
            new RunNovoCliente(sockete).start();
        }catch(Exception e){
            e.printStackTrace();
        }
        

    }
    
    private void fecharServidor(){
        try {
            conexao.setText(conexao.getText().trim()+"\n"+"SERVIDOR IR√Å ENCERRAR");
            if (dout != null) {
                dout.close();
            }
            if (din != null) {
                din.close();
            }
            if (socket != null) {
                socket.close();
            }
            RunServer.sleep(3000);
            System.exit(0);
        } catch (IOException ex) {
            ex.printStackTrace();
        } catch (InterruptedException ex) {
            System.out.println("ERRO NO SLEEP");
            ex.printStackTrace();
        }
    }

    private void conexaoT(Socket so){
        DataInputStream dinc;
        DataOutputStream doutc;
        try{
            dinc = new DataInputStream(so.getInputStream());
            doutc = new DataOutputStream(so.getOutputStream());

            BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
            
            String msgin="";
            String msgout="";

            while(!msgin.equals("end")){
                msgin = dinc.readUTF();
                conexao.setText(conexao.getText().trim()+"\n"+msgin);
            }
            fecharServidor();
        }catch(Exception e){
            e.printStackTrace();
        }  
        
    }
    
    private void fecharSocket(){
        try {
            conexao.setText(conexao.getText().trim()+"\n"+"SOCKET IR√Å ENCERRAR");
            if (dout != null) {
                dout.close();
            }
            if (din != null) {
                din.close();
            }else{
                while(din.available()>0) {
                    String value = din.readUTF();
                }
            }
            if (socket != null) {
                socket.close();
            }
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }
    
    class RunNovoCliente extends Thread{
        Socket so;
        private RunNovoCliente(Socket sockett) {
            so =sockett;
        }
        public void run(){
            arClientes.add(this.getId());
            for(int i=0;i<arClientes.size();i++){
                System.out.println("ID THREAD: "+arClientes.get(i));
            }
            conexaoT(so);
            fecharSocket();
        }
    }
    
    class RunServer extends Thread {
        public void run() {
            try {
                serverSocket = new ServerSocket(Integer.parseInt(porta.getText()));
            } catch (IOException ex) {
                ex.printStackTrace();
            }
            iniciarServidor();
        }
    }
    
}
